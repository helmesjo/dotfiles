# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle pip





# Reload whkd configuration
alt + shift - o         : yabai --restart-service

# App shortcuts
alt - return            : alacritty &

alt - q                 : yabai -m window --close
alt - m                 : yabai -m window --minimize

# Focus windows
alt - h                   : yabai -m window --focus west
alt - j                   : yabai -m window --focus south
alt - k                   : yabai -m window --focus north
alt - l                   : yabai -m window --focus east
# alt + shift - 0x21        : yabai -m window --focus previous # [
# alt + shift - 0x1E        : yabai -m window --focus next     # ]

# Move windows
alt + shift - h           : yabai -m window --warp west
alt + shift - j           : yabai -m window --warp south
alt + shift - k           : yabai -m window --warp north
alt + shift - l           : yabai -m window --warp east
alt + shift - return      : yabai -m window --warp first

# # Stack windows
# alt + left              : komorebic stack left
# alt + down              : komorebic stack down
# alt + up                : komorebic stack up
# alt + right             : komorebic stack right
# alt + oem_1             : komorebic unstack # oem_1 is ;
# alt + oem_4             : komorebic cycle-stack previous # oem_4 is [
# alt + oem_6             : komorebic cycle-stack next # oem_6 is ]

# Resize
alt - 0x1B              : yabai -m window --resize left:10:0  --resize right:10:0
alt - 0x18              : yabai -m window --resize left:-10:0 --resize right:-10:0
alt + shift - 0x1B      : yabai -m window --resize top:0:10   --resize bot:0:10
alt + shift - 0x18      : yabai -m window --resize top:0:-10  --resize bot:0:-10

# Manipulate windows
alt - t                 : yabai -m window --toggle float --grid 4:4:1:1:2:2
alt + shift - f         : yabai -m window --toggle zoom-fullscreen

# # Window manager options
# alt + shift + r         : komorebic retile
# alt + p                 : komorebic toggle-pause

# # Layouts
# alt + x                 : komorebic flip-layout horizontal
# alt + y                 : komorebic flip-layout vertical

# # Workspaces
# alt + 1                 : komorebic focus-workspace 0
# alt + 2                 : komorebic focus-workspace 1
# alt + 3                 : komorebic focus-workspace 2
# alt + 4                 : komorebic focus-workspace 3
# alt + 5                 : komorebic focus-workspace 4
# alt + 6                 : komorebic focus-workspace 5
# alt + 7                 : komorebic focus-workspace 6
# alt + 8                 : komorebic focus-workspace 7

# # Move windows across workspaces
# alt + shift + 1         : komorebic move-to-workspace 0
# alt + shift + 2         : komorebic move-to-workspace 1
# alt + shift + 3         : komorebic move-to-workspace 2
# alt + shift + 4         : komorebic move-to-workspace 3
# alt + shift + 5         : komorebic move-to-workspace 4
# alt + shift + 6         : komorebic move-to-workspace 5
# alt + shift + 7         : komorebic move-to-workspace 6
# alt + shift + 8         : komorebic move-to-workspace 7
